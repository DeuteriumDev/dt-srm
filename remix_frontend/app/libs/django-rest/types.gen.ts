// This file is auto-generated by @hey-api/openapi-ts

export type Answer = {
    readonly id: number;
    title: string;
    description?: string;
    image?: string | null;
    index?: number;
};

/**
 * A ModelSerializer that takes an additional `fields` argument that
 * controls which fields should be displayed.
 */
export type CustomUser = {
    readonly id: string;
    email: string;
    avatar?: string | null;
    first_name?: string;
    last_name?: string;
    is_active?: boolean;
    readonly groups: Array<Nested>;
};

/**
 * A serializer mixin that takes an additional `fields` argument that controls
 * which fields should be displayed.
 */
export type Folder = {
    readonly id: string;
    readonly created: string;
    readonly updated: string;
    inherit_permissions?: boolean;
    name: string;
    description?: string | null;
    favorite?: boolean;
    parent?: string | null;
};

export type Kit = {
    readonly id: string;
    readonly created: string;
    readonly updated: string;
    inherit_permissions?: boolean;
    title: string;
    start: Nested;
    parent: Nested;
};

export type Nested = {
    readonly id: string;
    readonly created: string;
    readonly updated: string;
    inherit_permissions?: boolean;
    title?: string;
    description?: string | null;
    image?: string | null;
    next: Nested;
    readonly answers: Array<Nested>;
};

/**
 * A ModelSerializer that takes an additional `fields` argument that
 * controls which fields should be displayed.
 */
export type Organization = {
    readonly id: number;
    name: string;
    avatar?: string | null;
    children: Nested;
};

export type PaginatedAnswerList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Answer>;
};

export type PaginatedCustomUserList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<CustomUser>;
};

export type PaginatedFolderList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Folder>;
};

export type PaginatedKitList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Kit>;
};

export type PaginatedOrganizationList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Organization>;
};

export type PaginatedQuestionList = {
    count: number;
    next?: string | null;
    previous?: string | null;
    results: Array<Question>;
};

export type PatchedAnswer = {
    readonly id?: number;
    title?: string;
    description?: string;
    image?: string | null;
    index?: number;
};

/**
 * A ModelSerializer that takes an additional `fields` argument that
 * controls which fields should be displayed.
 */
export type PatchedCustomUser = {
    readonly id?: string;
    email?: string;
    avatar?: string | null;
    first_name?: string;
    last_name?: string;
    is_active?: boolean;
    readonly groups?: Array<Nested>;
};

/**
 * A serializer mixin that takes an additional `fields` argument that controls
 * which fields should be displayed.
 */
export type PatchedFolder = {
    readonly id?: string;
    readonly created?: string;
    readonly updated?: string;
    inherit_permissions?: boolean;
    name?: string;
    description?: string | null;
    favorite?: boolean;
    parent?: string | null;
};

export type PatchedKit = {
    readonly id?: string;
    readonly created?: string;
    readonly updated?: string;
    inherit_permissions?: boolean;
    title?: string;
    start?: Nested;
    parent?: Nested;
};

/**
 * A ModelSerializer that takes an additional `fields` argument that
 * controls which fields should be displayed.
 */
export type PatchedOrganization = {
    readonly id?: number;
    name?: string;
    avatar?: string | null;
    children?: Nested;
};

export type PatchedQuestion = {
    readonly id?: string;
    readonly created?: string;
    readonly updated?: string;
    inherit_permissions?: boolean;
    title?: string;
    description?: string | null;
    image?: string | null;
    next?: Nested;
    readonly answers?: Array<Nested>;
};

export type Question = {
    readonly id: string;
    readonly created: string;
    readonly updated: string;
    inherit_permissions?: boolean;
    title?: string;
    description?: string | null;
    image?: string | null;
    next: Nested;
    readonly answers: Array<Nested>;
};

export type AnswersListData = {
    body?: never;
    path?: never;
    query?: {
        description?: string;
        image?: string;
        index?: number;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        title?: string;
    };
    url: '/api/v1/answers/';
};

export type AnswersListResponses = {
    200: PaginatedAnswerList;
};

export type AnswersListResponse = AnswersListResponses[keyof AnswersListResponses];

export type AnswersCreateData = {
    body: Answer;
    path?: never;
    query?: never;
    url: '/api/v1/answers/';
};

export type AnswersCreateResponses = {
    201: Answer;
};

export type AnswersCreateResponse = AnswersCreateResponses[keyof AnswersCreateResponses];

export type AnswersDestroyData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this answer.
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/answers/{id}/';
};

export type AnswersDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type AnswersDestroyResponse = AnswersDestroyResponses[keyof AnswersDestroyResponses];

export type AnswersRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this answer.
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/answers/{id}/';
};

export type AnswersRetrieveResponses = {
    200: Answer;
};

export type AnswersRetrieveResponse = AnswersRetrieveResponses[keyof AnswersRetrieveResponses];

export type AnswersPartialUpdateData = {
    body?: PatchedAnswer;
    path: {
        /**
         * A unique integer value identifying this answer.
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/answers/{id}/';
};

export type AnswersPartialUpdateResponses = {
    200: Answer;
};

export type AnswersPartialUpdateResponse = AnswersPartialUpdateResponses[keyof AnswersPartialUpdateResponses];

export type AnswersUpdateData = {
    body: Answer;
    path: {
        /**
         * A unique integer value identifying this answer.
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/answers/{id}/';
};

export type AnswersUpdateResponses = {
    200: Answer;
};

export type AnswersUpdateResponse = AnswersUpdateResponses[keyof AnswersUpdateResponses];

export type FoldersListData = {
    body?: never;
    path?: never;
    query?: {
        created?: string;
        description?: string;
        favorite?: boolean;
        id?: string;
        inherit_permissions?: boolean;
        name?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        parent?: string;
        updated?: string;
    };
    url: '/api/v1/folders/';
};

export type FoldersListResponses = {
    200: PaginatedFolderList;
};

export type FoldersListResponse = FoldersListResponses[keyof FoldersListResponses];

export type FoldersCreateData = {
    body: Folder;
    path?: never;
    query?: never;
    url: '/api/v1/folders/';
};

export type FoldersCreateResponses = {
    201: Folder;
};

export type FoldersCreateResponse = FoldersCreateResponses[keyof FoldersCreateResponses];

export type FoldersDestroyData = {
    body?: never;
    path: {
        /**
         * A UUID string identifying this folder.
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/folders/{id}/';
};

export type FoldersDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type FoldersDestroyResponse = FoldersDestroyResponses[keyof FoldersDestroyResponses];

export type FoldersRetrieveData = {
    body?: never;
    path: {
        /**
         * A UUID string identifying this folder.
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/folders/{id}/';
};

export type FoldersRetrieveResponses = {
    200: Folder;
};

export type FoldersRetrieveResponse = FoldersRetrieveResponses[keyof FoldersRetrieveResponses];

export type FoldersPartialUpdateData = {
    body?: PatchedFolder;
    path: {
        /**
         * A UUID string identifying this folder.
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/folders/{id}/';
};

export type FoldersPartialUpdateResponses = {
    200: Folder;
};

export type FoldersPartialUpdateResponse = FoldersPartialUpdateResponses[keyof FoldersPartialUpdateResponses];

export type FoldersUpdateData = {
    body: Folder;
    path: {
        /**
         * A UUID string identifying this folder.
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/folders/{id}/';
};

export type FoldersUpdateResponses = {
    200: Folder;
};

export type FoldersUpdateResponse = FoldersUpdateResponses[keyof FoldersUpdateResponses];

export type KitsListData = {
    body?: never;
    path?: never;
    query?: {
        created?: string;
        id?: string;
        inherit_permissions?: boolean;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        parent?: string;
        start?: string;
        title?: string;
        updated?: string;
    };
    url: '/api/v1/kits/';
};

export type KitsListResponses = {
    200: PaginatedKitList;
};

export type KitsListResponse = KitsListResponses[keyof KitsListResponses];

export type KitsCreateData = {
    body: Kit;
    path?: never;
    query?: never;
    url: '/api/v1/kits/';
};

export type KitsCreateResponses = {
    201: Kit;
};

export type KitsCreateResponse = KitsCreateResponses[keyof KitsCreateResponses];

export type KitsDestroyData = {
    body?: never;
    path: {
        /**
         * A UUID string identifying this kit.
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/kits/{id}/';
};

export type KitsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type KitsDestroyResponse = KitsDestroyResponses[keyof KitsDestroyResponses];

export type KitsRetrieveData = {
    body?: never;
    path: {
        /**
         * A UUID string identifying this kit.
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/kits/{id}/';
};

export type KitsRetrieveResponses = {
    200: Kit;
};

export type KitsRetrieveResponse = KitsRetrieveResponses[keyof KitsRetrieveResponses];

export type KitsPartialUpdateData = {
    body?: PatchedKit;
    path: {
        /**
         * A UUID string identifying this kit.
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/kits/{id}/';
};

export type KitsPartialUpdateResponses = {
    200: Kit;
};

export type KitsPartialUpdateResponse = KitsPartialUpdateResponses[keyof KitsPartialUpdateResponses];

export type KitsUpdateData = {
    body: Kit;
    path: {
        /**
         * A UUID string identifying this kit.
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/kits/{id}/';
};

export type KitsUpdateResponses = {
    200: Kit;
};

export type KitsUpdateResponse = KitsUpdateResponses[keyof KitsUpdateResponses];

export type OrganizationsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
    };
    url: '/api/v1/organizations/';
};

export type OrganizationsListResponses = {
    200: PaginatedOrganizationList;
};

export type OrganizationsListResponse = OrganizationsListResponses[keyof OrganizationsListResponses];

export type OrganizationsCreateData = {
    body: Organization;
    path?: never;
    query?: never;
    url: '/api/v1/organizations/';
};

export type OrganizationsCreateResponses = {
    201: Organization;
};

export type OrganizationsCreateResponse = OrganizationsCreateResponses[keyof OrganizationsCreateResponses];

export type OrganizationsDestroyData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this organization.
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/organizations/{id}/';
};

export type OrganizationsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type OrganizationsDestroyResponse = OrganizationsDestroyResponses[keyof OrganizationsDestroyResponses];

export type OrganizationsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique integer value identifying this organization.
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/organizations/{id}/';
};

export type OrganizationsRetrieveResponses = {
    200: Organization;
};

export type OrganizationsRetrieveResponse = OrganizationsRetrieveResponses[keyof OrganizationsRetrieveResponses];

export type OrganizationsPartialUpdateData = {
    body?: PatchedOrganization;
    path: {
        /**
         * A unique integer value identifying this organization.
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/organizations/{id}/';
};

export type OrganizationsPartialUpdateResponses = {
    200: Organization;
};

export type OrganizationsPartialUpdateResponse = OrganizationsPartialUpdateResponses[keyof OrganizationsPartialUpdateResponses];

export type OrganizationsUpdateData = {
    body: Organization;
    path: {
        /**
         * A unique integer value identifying this organization.
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/organizations/{id}/';
};

export type OrganizationsUpdateResponses = {
    200: Organization;
};

export type OrganizationsUpdateResponse = OrganizationsUpdateResponses[keyof OrganizationsUpdateResponses];

export type QuestionsListData = {
    body?: never;
    path?: never;
    query?: {
        answers?: Array<number>;
        created?: string;
        description?: string;
        id?: string;
        image?: string;
        inherit_permissions?: boolean;
        next?: string;
        /**
         * A page number within the paginated result set.
         */
        page?: number;
        title?: string;
        updated?: string;
    };
    url: '/api/v1/questions/';
};

export type QuestionsListResponses = {
    200: PaginatedQuestionList;
};

export type QuestionsListResponse = QuestionsListResponses[keyof QuestionsListResponses];

export type QuestionsCreateData = {
    body?: Question;
    path?: never;
    query?: never;
    url: '/api/v1/questions/';
};

export type QuestionsCreateResponses = {
    201: Question;
};

export type QuestionsCreateResponse = QuestionsCreateResponses[keyof QuestionsCreateResponses];

export type QuestionsDestroyData = {
    body?: never;
    path: {
        /**
         * A UUID string identifying this question.
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/questions/{id}/';
};

export type QuestionsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type QuestionsDestroyResponse = QuestionsDestroyResponses[keyof QuestionsDestroyResponses];

export type QuestionsRetrieveData = {
    body?: never;
    path: {
        /**
         * A UUID string identifying this question.
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/questions/{id}/';
};

export type QuestionsRetrieveResponses = {
    200: Question;
};

export type QuestionsRetrieveResponse = QuestionsRetrieveResponses[keyof QuestionsRetrieveResponses];

export type QuestionsPartialUpdateData = {
    body?: PatchedQuestion;
    path: {
        /**
         * A UUID string identifying this question.
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/questions/{id}/';
};

export type QuestionsPartialUpdateResponses = {
    200: Question;
};

export type QuestionsPartialUpdateResponse = QuestionsPartialUpdateResponses[keyof QuestionsPartialUpdateResponses];

export type QuestionsUpdateData = {
    body?: Question;
    path: {
        /**
         * A UUID string identifying this question.
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/questions/{id}/';
};

export type QuestionsUpdateResponses = {
    200: Question;
};

export type QuestionsUpdateResponse = QuestionsUpdateResponses[keyof QuestionsUpdateResponses];

export type UsersListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * A page number within the paginated result set.
         */
        page?: number;
    };
    url: '/api/v1/users/';
};

export type UsersListResponses = {
    200: PaginatedCustomUserList;
};

export type UsersListResponse = UsersListResponses[keyof UsersListResponses];

export type UsersCreateData = {
    body: CustomUser;
    path?: never;
    query?: never;
    url: '/api/v1/users/';
};

export type UsersCreateResponses = {
    201: CustomUser;
};

export type UsersCreateResponse = UsersCreateResponses[keyof UsersCreateResponses];

export type UsersDestroyData = {
    body?: never;
    path: {
        /**
         * A UUID string identifying this user.
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/users/{id}/';
};

export type UsersDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type UsersDestroyResponse = UsersDestroyResponses[keyof UsersDestroyResponses];

export type UsersRetrieveData = {
    body?: never;
    path: {
        /**
         * A UUID string identifying this user.
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/users/{id}/';
};

export type UsersRetrieveResponses = {
    200: CustomUser;
};

export type UsersRetrieveResponse = UsersRetrieveResponses[keyof UsersRetrieveResponses];

export type UsersPartialUpdateData = {
    body?: PatchedCustomUser;
    path: {
        /**
         * A UUID string identifying this user.
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/users/{id}/';
};

export type UsersPartialUpdateResponses = {
    200: CustomUser;
};

export type UsersPartialUpdateResponse = UsersPartialUpdateResponses[keyof UsersPartialUpdateResponses];

export type UsersUpdateData = {
    body: CustomUser;
    path: {
        /**
         * A UUID string identifying this user.
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/users/{id}/';
};

export type UsersUpdateResponses = {
    200: CustomUser;
};

export type UsersUpdateResponse = UsersUpdateResponses[keyof UsersUpdateResponses];