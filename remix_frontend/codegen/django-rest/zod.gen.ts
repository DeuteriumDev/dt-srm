// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zAnswer = z.object({
    id: z.number().int().readonly(),
    updated: z.string().datetime().readonly(),
    updated_by: z.object({
        id: z.string().uuid().readonly(),
        email: z.string().email().max(254),
        avatar: z.union([
            z.string().url(),
            z.null()
        ]).optional(),
        first_name: z.string().max(30).optional(),
        last_name: z.string().max(30).optional(),
        is_active: z.boolean().optional(),
        groups: z.array(z.string().uuid())
    }),
    breadcrumbs: z.array(z.object({
        id: z.string().uuid(),
        name: z.string().readonly(),
        parent: z.string().uuid().readonly()
    })).readonly(),
    tags: z.array(z.string()).readonly(),
    title: z.string(),
    description: z.string().optional(),
    image: z.union([
        z.string().url().max(200),
        z.null()
    ]).optional(),
    index: z.number().int().gte(0).lte(2147483647).optional(),
    question: z.number().int()
});

export const zAnswerRequest = z.object({
    title: z.string().min(1),
    description: z.string().min(1).optional(),
    image: z.union([
        z.string().url().max(200),
        z.null()
    ]).optional(),
    index: z.number().int().gte(0).lte(2147483647).optional(),
    question: z.number().int()
});

export const zContentObject = z.object({
    id: z.string().uuid().readonly(),
    name: z.string().readonly()
});

export const zCtypeEnum = z.unknown();

export const zCustomGroup = z.object({
    id: z.string().uuid().readonly(),
    name: z.string(),
    created: z.string().datetime().readonly(),
    updated: z.string().datetime().readonly(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    hidden: z.boolean().optional(),
    parent: z.union([
        z.string().uuid(),
        z.null()
    ]).optional()
});

export const zCustomGroupRequest = z.object({
    name: z.string().min(1),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    hidden: z.boolean().optional(),
    parent: z.union([
        z.string().uuid(),
        z.null()
    ]).optional()
});

export const zCustomPermissions = z.object({
    id: z.string().uuid().readonly(),
    object_id: z.string().uuid(),
    can_create: z.boolean().optional(),
    can_read: z.boolean().optional(),
    can_update: z.boolean().optional(),
    can_delete: z.boolean().optional(),
    created: z.string().datetime().readonly(),
    updated: z.string().datetime().readonly(),
    ctype: zCtypeEnum,
    content_object: zContentObject,
    group: zCustomGroup
});

export const zCustomPermissionsRequest = z.object({
    object_id: z.string().uuid(),
    can_create: z.boolean().optional(),
    can_read: z.boolean().optional(),
    can_update: z.boolean().optional(),
    can_delete: z.boolean().optional(),
    ctype: zCtypeEnum,
    group_id: z.string().uuid()
});

export const zCustomUser = z.object({
    id: z.string().uuid().readonly(),
    email: z.string().email().max(254),
    avatar: z.union([
        z.string().url(),
        z.null()
    ]).optional(),
    first_name: z.string().max(30).optional(),
    last_name: z.string().max(30).optional(),
    is_active: z.boolean().optional(),
    groups: z.array(z.string().uuid())
});

export const zCustomUserRequest = z.object({
    email: z.string().email().min(1).max(254),
    avatar: z.union([
        z.string(),
        z.null()
    ]).optional(),
    first_name: z.string().max(30).optional(),
    last_name: z.string().max(30).optional(),
    is_active: z.boolean().optional(),
    groups: z.array(z.string().uuid())
});

export const zFolder = z.object({
    id: z.string().uuid().readonly(),
    updated: z.string().datetime().readonly(),
    updated_by: zCustomUser,
    breadcrumbs: z.array(z.object({
        id: z.string().uuid(),
        name: z.string().readonly(),
        parent: z.string().uuid().readonly()
    })).readonly(),
    tags: z.array(z.string()).readonly(),
    permissions: z.array(zCustomPermissions).readonly(),
    created: z.string().datetime().readonly(),
    inherit_permissions: z.boolean().optional(),
    name: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    favorite: z.boolean().optional(),
    polymorphic_ctype: z.union([
        z.number().int().readonly(),
        z.null()
    ]).readonly(),
    parent: z.union([
        z.string().uuid(),
        z.null()
    ]).optional()
});

export const zFolderRequest = z.object({
    inherit_permissions: z.boolean().optional(),
    name: z.string().min(1),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    favorite: z.boolean().optional(),
    parent: z.union([
        z.string().uuid(),
        z.null()
    ]).optional()
});

export const zFolderTyped = z.object({
    resourcetype: z.string()
}).merge(zFolder);

export const zInvoice = z.object({
    id: z.string().uuid().readonly(),
    updated: z.string().datetime().readonly(),
    updated_by: zCustomUser,
    breadcrumbs: z.array(z.object({
        id: z.string().uuid(),
        name: z.string().readonly(),
        parent: z.string().uuid().readonly()
    })).readonly(),
    tags: z.array(z.string()).readonly(),
    line_items: z.array(z.object({
        id: z.string().uuid().readonly(),
        updated: z.string().datetime().readonly(),
        updated_by: zCustomUser,
        breadcrumbs: z.array(z.object({
            id: z.string().uuid(),
            name: z.string().readonly(),
            parent: z.string().uuid().readonly()
        })).readonly(),
        tags: z.array(z.string()).readonly(),
        items: z.array(z.object({
            id: z.string().uuid().readonly(),
            updated: z.string().datetime().readonly(),
            updated_by: zCustomUser,
            breadcrumbs: z.array(z.object({
                id: z.string().uuid(),
                name: z.string().readonly(),
                parent: z.string().uuid().readonly()
            })).readonly(),
            tags: z.array(z.string()).readonly(),
            name: z.union([
                z.string(),
                z.null()
            ]).optional(),
            value: z.union([
                z.number(),
                z.null()
            ]).optional(),
            index: z.number().int().gte(0).lte(2147483647).optional(),
            line_item: z.string().uuid()
        })).readonly(),
        index: z.number().int().gte(0).lte(2147483647).optional(),
        invoice: z.string().uuid()
    })),
    created: z.string().datetime().readonly(),
    inherit_permissions: z.boolean().optional(),
    name: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    total: z.union([
        z.number(),
        z.null()
    ]).optional(),
    polymorphic_ctype: z.union([
        z.number().int().readonly(),
        z.null()
    ]).readonly(),
    parent: z.union([
        z.string().uuid(),
        z.null()
    ]).optional()
});

export const zInvoiceRequest = z.object({
    line_items: z.array(z.object({
        index: z.number().int().gte(0).lte(2147483647).optional(),
        invoice: z.string().uuid()
    })),
    inherit_permissions: z.boolean().optional(),
    name: z.string().min(1),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    total: z.union([
        z.number(),
        z.null()
    ]).optional(),
    parent: z.union([
        z.string().uuid(),
        z.null()
    ]).optional()
});

export const zInvoiceTyped = z.object({
    resourcetype: z.string()
}).merge(zInvoice);

export const zItem = z.object({
    id: z.string().uuid().readonly(),
    updated: z.string().datetime().readonly(),
    updated_by: zCustomUser,
    breadcrumbs: z.array(z.object({
        id: z.string().uuid(),
        name: z.string().readonly(),
        parent: z.string().uuid().readonly()
    })).readonly(),
    tags: z.array(z.string()).readonly(),
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    value: z.union([
        z.number(),
        z.null()
    ]).optional(),
    index: z.number().int().gte(0).lte(2147483647).optional(),
    line_item: z.string().uuid()
});

export const zItemRequest = z.object({
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    value: z.union([
        z.number(),
        z.null()
    ]).optional(),
    index: z.number().int().gte(0).lte(2147483647).optional(),
    line_item: z.string().uuid()
});

export const zKit = z.object({
    id: z.string().uuid().readonly(),
    updated: z.string().datetime().readonly(),
    updated_by: zCustomUser,
    breadcrumbs: z.array(z.object({
        id: z.string().uuid(),
        name: z.string().readonly(),
        parent: z.string().uuid().readonly()
    })).readonly(),
    tags: z.array(z.string()).readonly(),
    created: z.string().datetime().readonly(),
    inherit_permissions: z.boolean().optional(),
    name: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    polymorphic_ctype: z.union([
        z.number().int().readonly(),
        z.null()
    ]).readonly(),
    parent: z.union([
        z.string().uuid(),
        z.null()
    ]).optional()
});

export const zKitRequest = z.object({
    inherit_permissions: z.boolean().optional(),
    name: z.string().min(1),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    parent: z.union([
        z.string().uuid(),
        z.null()
    ]).optional()
});

export const zKitTyped = z.object({
    resourcetype: z.string()
}).merge(zKit);

export const zLineItem = z.object({
    id: z.string().uuid().readonly(),
    updated: z.string().datetime().readonly(),
    updated_by: zCustomUser,
    breadcrumbs: z.array(z.object({
        id: z.string().uuid(),
        name: z.string().readonly(),
        parent: z.string().uuid().readonly()
    })).readonly(),
    tags: z.array(z.string()).readonly(),
    items: z.array(zItem).readonly(),
    index: z.number().int().gte(0).lte(2147483647).optional(),
    invoice: z.string().uuid()
});

export const zLineItemRequest = z.object({
    index: z.number().int().gte(0).lte(2147483647).optional(),
    invoice: z.string().uuid()
});

export const zNested = z.object({
    id: z.string().uuid().readonly(),
    name: z.string(),
    created: z.string().datetime().readonly(),
    updated: z.string().datetime().readonly(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    hidden: z.boolean().optional(),
    parent: z.union([
        z.string().uuid(),
        z.null()
    ]).optional()
});

export const zNestedRequest = z.object({
    name: z.string().min(1),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    hidden: z.boolean().optional(),
    parent: z.union([
        z.string().uuid(),
        z.null()
    ]).optional()
});

export const zNodePolymorphic = z.union([
    z.object({
        resourcetype: z.literal('Folder').optional()
    }).merge(zFolderTyped),
    z.object({
        resourcetype: z.literal('Invoice').optional()
    }).merge(zInvoiceTyped),
    z.object({
        resourcetype: z.literal('Kit').optional()
    }).merge(zKitTyped)
]);

export const zOrganization = z.object({
    id: z.string().uuid().readonly(),
    name: z.string(),
    avatar: z.union([
        z.string().url(),
        z.null()
    ]).optional(),
    root: zNested
});

export const zOrganizationRequest = z.object({
    name: z.string().min(1),
    avatar: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zPaginatedAnswerList = z.object({
    count: z.number().int(),
    next: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    previous: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    results: z.array(zAnswer)
});

export const zPaginatedCustomGroupList = z.object({
    count: z.number().int(),
    next: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    previous: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    results: z.array(zCustomGroup)
});

export const zPaginatedCustomPermissionsList = z.object({
    count: z.number().int(),
    next: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    previous: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    results: z.array(zCustomPermissions)
});

export const zPaginatedCustomUserList = z.object({
    count: z.number().int(),
    next: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    previous: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    results: z.array(zCustomUser)
});

export const zPaginatedFolderList = z.object({
    count: z.number().int(),
    next: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    previous: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    results: z.array(zFolder)
});

export const zPaginatedInvoiceList = z.object({
    count: z.number().int(),
    next: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    previous: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    results: z.array(zInvoice)
});

export const zPaginatedItemList = z.object({
    count: z.number().int(),
    next: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    previous: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    results: z.array(zItem)
});

export const zPaginatedKitList = z.object({
    count: z.number().int(),
    next: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    previous: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    results: z.array(zKit)
});

export const zPaginatedLineItemList = z.object({
    count: z.number().int(),
    next: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    previous: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    results: z.array(zLineItem)
});

export const zPaginatedNodePolymorphicList = z.object({
    count: z.number().int(),
    next: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    previous: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    results: z.array(zNodePolymorphic)
});

export const zPaginatedOrganizationList = z.object({
    count: z.number().int(),
    next: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    previous: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    results: z.array(zOrganization)
});

export const zPaginatedQuestionList = z.object({
    count: z.number().int(),
    next: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    previous: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    results: z.array(z.object({
        id: z.number().int().readonly(),
        updated: z.string().datetime().readonly(),
        updated_by: zCustomUser,
        breadcrumbs: z.array(z.object({
            id: z.string().uuid(),
            name: z.string().readonly(),
            parent: z.string().uuid().readonly()
        })).readonly(),
        tags: z.array(z.string()).readonly(),
        title: z.string().optional(),
        description: z.union([
            z.string(),
            z.null()
        ]).optional(),
        image: z.union([
            z.string().url().max(200),
            z.null()
        ]).optional(),
        next: z.union([
            z.number().int(),
            z.null()
        ]).optional(),
        kit: z.string().uuid()
    }))
});

export const zParentFolder = z.object({
    id: z.string().uuid(),
    name: z.string().readonly(),
    parent: z.string().uuid().readonly()
});

export const zPatchedAnswerRequest = z.object({
    title: z.string().min(1).optional(),
    description: z.string().min(1).optional(),
    image: z.union([
        z.string().url().max(200),
        z.null()
    ]).optional(),
    index: z.number().int().gte(0).lte(2147483647).optional(),
    question: z.number().int().optional()
});

export const zPatchedCustomGroupRequest = z.object({
    name: z.string().min(1).optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    hidden: z.boolean().optional(),
    parent: z.union([
        z.string().uuid(),
        z.null()
    ]).optional()
});

export const zPatchedCustomPermissionsRequest = z.object({
    object_id: z.string().uuid().optional(),
    can_create: z.boolean().optional(),
    can_read: z.boolean().optional(),
    can_update: z.boolean().optional(),
    can_delete: z.boolean().optional(),
    ctype: zCtypeEnum.optional(),
    group_id: z.string().uuid().optional()
});

export const zPatchedCustomUserRequest = z.object({
    email: z.string().email().min(1).max(254).optional(),
    avatar: z.union([
        z.string(),
        z.null()
    ]).optional(),
    first_name: z.string().max(30).optional(),
    last_name: z.string().max(30).optional(),
    is_active: z.boolean().optional(),
    groups: z.array(z.string().uuid()).optional()
});

export const zPatchedFolderRequest = z.object({
    inherit_permissions: z.boolean().optional(),
    name: z.string().min(1).optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    favorite: z.boolean().optional(),
    parent: z.union([
        z.string().uuid(),
        z.null()
    ]).optional()
});

export const zPatchedInvoiceRequest = z.object({
    line_items: z.array(zLineItemRequest).optional(),
    inherit_permissions: z.boolean().optional(),
    name: z.string().min(1).optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    total: z.union([
        z.number(),
        z.null()
    ]).optional(),
    parent: z.union([
        z.string().uuid(),
        z.null()
    ]).optional()
});

export const zPatchedItemRequest = z.object({
    name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    value: z.union([
        z.number(),
        z.null()
    ]).optional(),
    index: z.number().int().gte(0).lte(2147483647).optional(),
    line_item: z.string().uuid().optional()
});

export const zPatchedKitRequest = z.object({
    inherit_permissions: z.boolean().optional(),
    name: z.string().min(1).optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    parent: z.union([
        z.string().uuid(),
        z.null()
    ]).optional()
});

export const zPatchedLineItemRequest = z.object({
    index: z.number().int().gte(0).lte(2147483647).optional(),
    invoice: z.string().uuid().optional()
});

export const zPatchedOrganizationRequest = z.object({
    name: z.string().min(1).optional(),
    avatar: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zPatchedQuestionRequest = z.object({
    title: z.string().min(1).optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    image: z.union([
        z.string().url().max(200),
        z.null()
    ]).optional(),
    next: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    kit: z.string().uuid().optional()
});

export const zQuestion = z.object({
    id: z.number().int().readonly(),
    updated: z.string().datetime().readonly(),
    updated_by: zCustomUser,
    breadcrumbs: z.array(zParentFolder).readonly(),
    tags: z.array(z.string()).readonly(),
    title: z.string().optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    image: z.union([
        z.string().url().max(200),
        z.null()
    ]).optional(),
    next: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    kit: z.string().uuid()
});

export const zQuestionRequest = z.object({
    title: z.string().min(1).optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    image: z.union([
        z.string().url().max(200),
        z.null()
    ]).optional(),
    next: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    kit: z.string().uuid()
});

export const zAnswersListResponse = zPaginatedAnswerList;

export const zAnswersCreateResponse = zAnswer;

export const zAnswersDestroyResponse = z.void();

export const zAnswersRetrieveResponse = zAnswer;

export const zAnswersPartialUpdateResponse = zAnswer;

export const zAnswersUpdateResponse = zAnswer;

export const zDocumentsListResponse = zPaginatedNodePolymorphicList;

export const zFoldersListResponse = zPaginatedFolderList;

export const zFoldersCreateResponse = zFolder;

export const zFoldersDestroyResponse = z.void();

export const zFoldersRetrieveResponse = zFolder;

export const zFoldersPartialUpdateResponse = zFolder;

export const zFoldersUpdateResponse = zFolder;

export const zGroupsListResponse = zPaginatedCustomGroupList;

export const zGroupsCreateResponse = zCustomGroup;

export const zGroupsDestroyResponse = z.void();

export const zGroupsRetrieveResponse = zCustomGroup;

export const zGroupsPartialUpdateResponse = zCustomGroup;

export const zGroupsUpdateResponse = zCustomGroup;

export const zInvoicesListResponse = zPaginatedInvoiceList;

export const zInvoicesCreateResponse = zInvoice;

export const zInvoicesDestroyResponse = z.void();

export const zInvoicesRetrieveResponse = zInvoice;

export const zInvoicesPartialUpdateResponse = zInvoice;

export const zInvoicesUpdateResponse = zInvoice;

export const zItemsListResponse = zPaginatedItemList;

export const zItemsCreateResponse = zItem;

export const zItemsDestroyResponse = z.void();

export const zItemsRetrieveResponse = zItem;

export const zItemsPartialUpdateResponse = zItem;

export const zItemsUpdateResponse = zItem;

export const zKitsListResponse = zPaginatedKitList;

export const zKitsCreateResponse = zKit;

export const zKitsDestroyResponse = z.void();

export const zKitsRetrieveResponse = zKit;

export const zKitsPartialUpdateResponse = zKit;

export const zKitsUpdateResponse = zKit;

export const zLineitemsListResponse = zPaginatedLineItemList;

export const zLineitemsCreateResponse = zLineItem;

export const zLineitemsDestroyResponse = z.void();

export const zLineitemsRetrieveResponse = zLineItem;

export const zLineitemsPartialUpdateResponse = zLineItem;

export const zLineitemsUpdateResponse = zLineItem;

export const zOrganizationsListResponse = zPaginatedOrganizationList;

export const zOrganizationsCreateResponse = zOrganization;

export const zOrganizationsDestroyResponse = z.void();

export const zOrganizationsRetrieveResponse = zOrganization;

export const zOrganizationsPartialUpdateResponse = zOrganization;

export const zOrganizationsUpdateResponse = zOrganization;

export const zPermissionsListResponse = zPaginatedCustomPermissionsList;

export const zPermissionsCreateResponse = zCustomPermissions;

export const zPermissionsDestroyResponse = z.void();

export const zPermissionsRetrieveResponse = zCustomPermissions;

export const zPermissionsPartialUpdateResponse = zCustomPermissions;

export const zPermissionsUpdateResponse = zCustomPermissions;

export const zQuestionsListResponse = zPaginatedQuestionList;

export const zQuestionsCreateResponse = zQuestion;

export const zQuestionsDestroyResponse = z.void();

export const zQuestionsRetrieveResponse = zQuestion;

export const zQuestionsPartialUpdateResponse = zQuestion;

export const zQuestionsUpdateResponse = zQuestion;

export const zUsersListResponse = zPaginatedCustomUserList;

export const zUsersCreateResponse = zCustomUser;

export const zUsersDestroyResponse = z.void();

export const zUsersRetrieveResponse = zCustomUser;

export const zUsersPartialUpdateResponse = zCustomUser;

export const zUsersUpdateResponse = zCustomUser;

export const zUsersMeRetrieveResponse = zCustomUser;